import torch
import torch.nn as nn
from transformers import BertModel, BertTokenizer, AdamW
import streamlit as st
import matplotlib.pyplot as plt

# python -m streamlit run front_end.py

class TransformerBinaryClassifier(nn.Module):
    def __init__(self, pretrained_model_name='bert-base-uncased', hidden_size=768, num_classes=2):
        super(TransformerBinaryClassifier, self).__init__()
        self.bert = BertModel.from_pretrained(pretrained_model_name)
        self.dropout = nn.Dropout(0.1)
        self.fc = nn.Linear(hidden_size, num_classes)
        self.softmax = nn.Softmax(dim=1)

    def forward(self, input_ids, attention_mask):
        outputs = self.bert(input_ids, attention_mask=attention_mask)
        pooled_output = outputs['pooler_output']
        pooled_output = self.dropout(pooled_output)
        logits = self.fc(pooled_output)
        probabilities = self.softmax(logits)
        return probabilities
    
def predict_sentiment(text, model, tokenizer):
    inputs = tokenizer(text, return_tensors='pt', max_length=512, truncation=True)
    with torch.no_grad():
        outputs = model(input_ids=inputs['input_ids'], attention_mask=inputs['attention_mask'])
        print(outputs)
    return outputs[0].numpy()

def plot_probabilities(probabilities):
    labels = ['User Created', 'AI Generated']
    colors = ['lightgreen', 'lightcoral']
    
    fig, ax = plt.subplots()
    bars = ax.bar(labels, probabilities, color=colors)
    
    ax.set_xlabel('Class')
    ax.set_ylabel('Probability (%)')
    ax.set_title('Class Probabilities')

    ax.set_ylim([0, 1])
    ax.set_yticklabels(['{:,.0%}'.format(x) for x in ax.get_yticks()])
    ax.legend(bars, labels, loc='upper right')

    return fig, ax

def main():
    st.title("Chat Checker")

    st.write("This program is designed to detect if a text is AI generated or not. The model running here utilized the pre-trained BERT model as well as some additional data. The maximum number of words and punctuation marks that will be considered is 512.")

    st.write("Enter text below to see if it was generated by an AI or not.")

    user_input = st.text_area("Input Text", "")
    
    model_path = "BERT_model/trained_models/bert_binary_classifier.pth"
    loaded_model = TransformerBinaryClassifier()
    loaded_model.load_state_dict(torch.load(model_path))
    loaded_model.eval()

    tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')

    if st.button("Predict"):
        user_input = [user_input]
        probabilities = predict_sentiment(user_input, loaded_model, tokenizer)

        st.write(f"Sentiment Probabilities: {probabilities}")
        prob_not_generated = probabilities[0]
        prob_generated = probabilities[1]

        if prob_generated > prob_not_generated:
            st.write(f"I am {prob_generated * 100:.2f}% sure this was generated")
        else:
            st.write(f"I am {prob_not_generated * 100:.2f}% sure this was NOT generated")
        
        fig, ax = plot_probabilities(probabilities)
        st.pyplot(fig)
        
        


if __name__ == '__main__':
    main()
